{"name":"Waver","tagline":"Fast wave-pcm reader for Node.js applications. ","body":"#Â Installing waver\r\nTo install your super-duper wave reader into your node.js aplication just run the following:\r\n\r\n`npm install waver`\r\n\r\n# Simple usage\r\nYou will need an audio buffer (only WAVE PCM without compression is supported at this time). The following sample code should get you started:\r\n\r\n```javascript\r\n    var waver        = require('waver');\r\n    var audioBuffer  = require('fs').readFileSync('pathToYourFile');\r\n    \r\n    waver.readRaw(audioBuffer, function(e,wave){ \r\n      \r\n      if (e) console.log('Error: ', e);\r\n      console.log(wave);\r\n\r\n    });\r\n```\r\n\r\nThis will output the following JSON structure:\r\n\r\n```javascript\r\n{ RIFFChunk: { ChunkID: 'RIFF', Format: 'WAVE', ChunkSize: 17147876 },\r\n  FormatChunk: \r\n   { Subchunk1ID: 'fmt ',\r\n     Subchunk1Size: 16,\r\n     AudioFormat: 1,\r\n     NumChannels: 1,\r\n     SampleRate: 8000,\r\n     ByteRate: 16000,\r\n     BlockAlign: 2,\r\n     BitsPerSample: 16 },\r\n  DataChunk: \r\n   { Subchunk2ID: 'data',\r\n     Subchunk2Size: 17147840,\r\n     Data: <Buffer 08 00 08 00 08 00  ...> } }\r\n```\r\n\r\n         \r\nInstead of ``readRaw`` you can use the ``read`` method to return an aditional element with the audio data in a numeric form.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}